
<head>
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <style>
        canvas {
            border: 1px solid #d3d3d3;
            background-color: #f1f1f1;
        }
    </style>
</head>
<body>

    <canvas id="MapCanvas" width="448" height="496"></canvas>
    <div id="idOutput"></div>
    <div id="XOutput"></div>
    <div id="YOutput"></div>
    <script src="~/js/signalr.min.js"></script>
    <script>
        var canvas = document.getElementById("MapCanvas");
        var context = canvas.getContext("2d");
        function Shape(x, y, w, h, fillColor) {
            this.x = x;
            this.y = y;
            this.w = w;
            this.h = h;
            this.fillColor = fillColor;
        }

        var myRect = [];

        var map = [
            [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
            [1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1],
            [1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 1],
            [1, 2, 1, 3, 3, 1, 2, 1, 3, 3, 3, 1, 2, 1, 1, 2, 1, 3, 3, 3, 1, 2, 1, 3, 3, 1, 2, 1],
            [1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 1],
            [1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1],
            [1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2, 1],
            [1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2, 1],
            [1, 2, 2, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 2, 2, 1],
            [1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 3, 1, 1, 3, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1],
            [3, 3, 3, 3, 3, 1, 2, 1, 1, 1, 1, 1, 3, 1, 1, 3, 1, 1, 1, 1, 1, 2, 1, 3, 3, 3, 3, 3],
            [3, 3, 3, 3, 3, 1, 2, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 2, 1, 3, 3, 3, 3, 3],
            [3, 3, 3, 3, 3, 1, 2, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 2, 1, 3, 3, 3, 3, 3],
            [1, 1, 1, 1, 1, 1, 2, 1, 1, 3, 1, 3, 3, 3, 3, 3, 3, 1, 3, 1, 1, 2, 1, 1, 1, 1, 1, 1],
            [3, 3, 3, 3, 3, 3, 2, 3, 3, 3, 1, 3, 3, 3, 3, 3, 3, 1, 3, 3, 3, 2, 3, 3, 3, 3, 3, 3],
            [1, 1, 1, 1, 1, 1, 2, 1, 1, 3, 1, 3, 3, 3, 3, 3, 3, 1, 3, 1, 1, 2, 1, 1, 1, 1, 1, 1],
            [3, 3, 3, 3, 3, 1, 2, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 2, 1, 3, 3, 3, 3, 3],
            [3, 3, 3, 3, 3, 1, 2, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 2, 1, 3, 3, 3, 3, 3],
            [3, 3, 3, 3, 3, 1, 2, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 2, 1, 3, 3, 3, 3, 3],
            [1, 1, 1, 1, 1, 1, 2, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 2, 1, 1, 1, 1, 1, 1],
            [1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1],
            [1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 1],
            [1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 1],
            [1, 2, 2, 2, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 9, 2, 2, 2, 2, 2, 2, 2, 1, 1, 2, 2, 2, 1],  
            [1, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 1],
            [1, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 1],
            [1, 2, 2, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 2, 2, 1],
            [1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1],
            [1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1],
            [1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1],
            [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
        ];

        for (var i in map) {
            for (var j in map[i]) {
                if (map[i][j] == 1) {
                    myRect.push(new Shape(j * 16, i * 16, 16, 16, "#221BC5"));
                }
                else {
                    myRect.push(new Shape(j * 16, i * 16, 16, 16, "#000000"));
                }
            }
        }


        for (var i in myRect) {
            oRec = myRect[i];
            context.fillStyle = oRec.fillColor;
            context.fillRect(oRec.x, oRec.y, oRec.w, oRec.h);
        }


        //SignalR
        const hubConnection = new signalR.HubConnectionBuilder()
            .withUrl("/game")
            .build();
        hubConnection.start().catch(err => console.error(err.toString()));

        hubConnection.on("DrawPacMan", (id, x, y) => {
        //    document.getElementById("idOutput").innerHTML = id;
            document.getElementById("XOutput").innerHTML = x;
            document.getElementById("YOutput").innerHTML = y;
            var image = new Image();
            image.onload = () => {
                context.drawImage(image, x *16, y * 16, 16, 16);
            };
            image.src = id;
        });



        
        window.addEventListener("keydown", function (event) {
            if (event.keyCode > 36 && event.keyCode < 41)
                hubConnection.invoke("PacmanDirection", event.keyCode).catch(err => console.error(err.toString()));
            event.preventDefault();
        });


        hubConnection.on("Dire", (direction) => {
            document.getElementById("idOutput").innerHTML = direction;
        });


        hubConnection.start();


    </script>
</body>